[{"content":"參考來源 https://github.com/Supporterino/truenas-graphite-to-prometheus\nTurenas app 建構 graphite-to-prometheus 參照 https://github.com/Supporterino/truenas-graphite-to-prometheus/blob/main/TRUENAS.md\nTruenas web \u0026gt; Apps \u0026gt; Discover App \u0026gt; Custom App\nApplication Name: graphite-exporter\nImage repository ghcr.io/supporterino/truenas-graphite-to-prometheus\n其他保持預設\n轉道 Port Forwarding\nContainer Port 與 Node Port\n9109 9109\n9108 9108\n都是預設 TCP Protocol\n9109用於 Graphite\n9108用於 Prometheus\ndocker 裡已預先定義好 graphite_mapping.conf\n1  https://github.com/Supporterino/truenas-graphite-to-prometheus/blob/main/graphite_mapping.conf   Truenas 匯出報告 web \u0026gt; report(報告) \u0026gt; 右上角 exporters\nThe prefix for the graphite metrics need to be set to truenas\n這邊要注意 prefix 必須為 truenas\nprometheus 匯入 truenas report prometheus.yml 增加以下設定\n1 2 3 4  # Job, for truenas_exporter - job_name: \u0026#39;truenas_exporter\u0026#39; static_configs: - targets: [\u0026#39;truenas_ip:9108\u0026#39;] # choose port number   位置為truenas 區網ip:9108\n1  docker compose down;docker compose up -d   有看到 truenas_exporter (1/1 up) 綠燈表示開始收集資訊了\nGrafana Grafana \u0026gt; Home \u0026gt; Connections \u0026gt;Data sources \u0026gt;Add data source \u0026gt; prometheus 如共用 prometheus\n拉到最下面 other 選項 自訂查詢\n1  node_cpu_seconds_total{job=\u0026#34;truenas_exporter\u0026#34;}\u0026amp;node_filesystem_avail_bytes{job=\u0026#34;truenas_exporter\u0026#34;}   save\u0026amp;test 綠燈 表 測試OK 剩最後一步囉~\nDashboards(儀錶板) \u0026gt; NEW(右上新增選項) \u0026gt; Import dashboard (右下)\n一次新增一個json文件,共新增三個面板\n主面板\n1  https://github.com/Supporterino/truenas-graphite-to-prometheus/blob/main/dashboards/truenas_scale.json   硬碟資訊\n1  https://github.com/Supporterino/truenas-graphite-to-prometheus/blob/main/dashboards/truenas_scale_disk_insights.json   溫度\n1  https://github.com/Supporterino/truenas-graphite-to-prometheus/blob/main/dashboards/truenas_scale_temperatures.json   閱讀資訊的便利比 truenas web 好多了,感謝 cucac 大的研究精神 https://github.com/cucac\nProxmox Influxdb Grafana 監控方案 Mudium: https://medium.com/@nykogabriel/how-to-monitor-proxmox-with-grafana-and-influxdb-e55116081867\n","date":"2024-09-21T00:00:00Z","image":"https://loveflee.github.io/p/truenas-grafana/truenas-grafana_hubaa24e4ffe0beeb1b331d6145becaccd_69183_120x120_fill_box_smart1_3.png","permalink":"https://loveflee.github.io/p/truenas-grafana/","title":"Grafana 與 Truenas 花火"},{"content":"參考來源 https://docs.taler.net/system-administration/nginx-prometheus-exporter.html\nhttps://opstree.com/blog/2021/11/09/nginx-monitoring-using-telegraf-prometheus-grafana/\n檢查支援 stub_status 與否 檢查模組是否已啟用，請執行：\n1  nginx -V 2\u0026gt;\u0026amp;1 | grep -o with-http_stub_status_module   輸出要看到 with-http_stub_status_module\n開啟 stub_status 1  nano /etc/nginx/conf.d/stub_status_nginx.conf   貼上以下內容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  server { listen 81 default_server; root /var/www/html; index index.html index.htm index.nginx-debian.html; server_name _; location / { try_files $uri $uri/ =404; } location /nginx_status { stub_status; allow 127.0.0.1; deny all; } }   測試是否有錯誤\n1  sudo nginx -t   輸出 test is successful 表示ok nginx 重載設定\n1  sudo nginx -s reload   確保正確\n1  curl http://127.0.0.1:81/nginx_status   輸出會看到\n1 2 3 4  Active connections: 3 server accepts handled requests 268 268 2279 Reading: 0 Writing: 1 Waiting: 2   telegraf 前往 https://docs.influxdata.com/telegraf/v1/install/\n照頁面提示安裝\nubuntu 的 path 位於 /etc/telegraf 更改設定前先備份\n1  cd /etc/telegraf;cp telegraf.conf bak;rm telegraf.conf   複製貼上設定檔\n1  nano telegraf.conf   貼上\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  [global_tags] [agent] interval = \u0026#34;60s\u0026#34; round_interval = true metric_batch_size = 1000 metric_buffer_limit = 10000 collection_jitter = \u0026#34;0s\u0026#34; flush_interval = \u0026#34;30s\u0026#34; flush_jitter = \u0026#34;0s\u0026#34; debug = false quiet = false logfile = \u0026#34;/var/log/telegraf/telegraf.log\u0026#34; omit_hostname = false [[inputs.nginx]] urls = [\u0026#34;http://127.0.0.1:81/nginx_status\u0026#34;] response_timeout = \u0026#34;5s\u0026#34; [[inputs.tail]] name_override = \u0026#34;nginxlog\u0026#34; files = [\u0026#34;/var/log/nginx/access.log\u0026#34;] from_beginning = true pipe = false data_format = \u0026#34;grok\u0026#34; grok_patterns = [\u0026#34;%{COMBINED_LOG_FORMAT}\u0026#34;] [[inputs.cpu]] percpu = true [[inputs.disk]] [[inputs.diskio]] [[inputs.net]] [[inputs.mem]] [[inputs.system]] ## 輸出設定 telegraf port [[outputs.prometheus_client]] listen = \u0026#34;0.0.0.0:9113\u0026#34;   重啟載入\n1  systemctl restart telegraf   如有錯誤使用以下指令除錯\n1  journalctl --no-pager --unit telegraf   如顯示無法打開日誌,修正權限\n1  chown -R telegraf:telegraf /var/log/telegraf   因只有一個要後拋有修改只限讀取 ImportCredential=telegraf.conf\nnano /etc/systemd/system/multi-user.target.wants/telegraf.service\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  [Unit] Description=Telegraf Documentation=https://github.com/influxdata/telegraf After=network-online.target Wants=network-online.target [Service] Type=notify NotifyAccess=all EnvironmentFile=-/etc/default/telegraf User=telegraf ImportCredential=telegraf.conf ExecStart=/usr/bin/telegraf -config /etc/telegraf/telegraf.conf -config-directory /etc/telegraf/telegraf.d $TELEGRAF_OPTS ExecReload=/bin/kill -HUP $MAINPID Restart=on-failure RestartForceExitStatus=SIGPIPE KillMode=mixed LimitMEMLOCK=8M:8M PrivateMounts=true [Install] WantedBy=multi-user.target   重載入 systemd\n1  systemctl daemon-reload;systemctl start telegraf.service;systemctl status telegraf.service   nginx-prometheus-exporter 版本資訊 url: https://github.com/nginxinc/nginx-prometheus-exporter/tags\ncli\n1 2 3 4 5 6  mkdir -p /tmp/nginx_exporter_tmp \u0026amp;\u0026amp; cd /tmp/nginx_exporter_tmp mkdir -p /opt/nginx-exporter wget https://github.com/nginxinc/nginx-prometheus-exporter/releases/download/v1.3.0/nginx-prometheus-exporter_1.3.0_linux_amd64.tar.gz tar axf nginx-prometheus-exporter_1.3.0_linux_amd64.tar.gz chown nginx-exporter:nginx-exporter * cp -r * /opt/nginx-exporter/   創專用使用者 指定沒有家目錄 無法使用 shell\n1  useradd --system --no-create-home --shell /bin/false nginx-exporter   systemd 啟用服務\n1  nano /etc/systemd/system/nginx-exporter.service   貼上\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  [Unit] Description=NGINX Prometheus Exporter Wants=network-online.target After=network-online.target StartLimitIntervalSec=0 [Service] User=nginx-exporter Group=nginx-exporter Type=simple Restart=on-failure RestartSec=5s ExecStart=/opt/nginx-exporter/nginx-prometheus-exporter --nginx.scrape-uri=http://localhost:81/nginx_status --web.systemd-socket [Install] WantedBy=multi-user.target   驗證 如無資訊輸出,表示之前有錯誤的地方!!\n1  curl http://localhost:9113/metrics   socket 可以省略部份,非必要\n1  nano /etc/systemd/system/nginx-exporter.socket   貼上\n1 2 3 4 5 6 7 8  [Unit] Description=NGINX Prometheus Exporter [Socket] ListenStream=9113 [Install] WantedBy=sockets.target   有修改需重載入systemd\n1  systemctl daemon-reload   打開 開機啟動 與 馬上開始服務\n1  systemctl enable nginx-exporter.service;systemctl start nginx-exporter.service;systemctl status nginx-exporter.service   prometheus 設定檔增加來源\n1  nano /etc/prometheus/prometheus.yml   本機安裝 prometheus\n1 2 3 4  # Job, for nginx_exporter - job_name: \u0026#39;nginx_exporter\u0026#39; static_configs: - targets: [\u0026#39;localhost:9113\u0026#39;] # choose port number   docker-compose.yaml 使用 docker compose 如非本機,則為 docker_host 所在 ip\ndocker-compose.yaml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  #version: \u0026#34;3\u0026#34; services: prometheus: image: prom/prometheus container_name: prometheus ports: - \u0026#39;9090:9090\u0026#39; volumes: - ./data/prometheus:/etc/prometheus - /etc/timezone:/etc/timezone networks: - monitor influxdb: image: influxdb container_name: influxdb ports: - \u0026#34;8086:8086\u0026#34; restart: always volumes: - ./data/influxdb:/var/lib/influxdb2:rw - /etc/timezone:/etc/timezone networks: - monitor grafana: image: grafana/grafana container_name: grafana user: \u0026#39;1000\u0026#39; ports: - \u0026#34;3000:3000\u0026#34; restart: always networks: - monitor volumes: - ./data/grafana:/var/lib/grafana - /etc/timezone:/etc/timezone # environment: # - GF_SERVER_ROOT_URL=http://grafana_ip:3000 # - GF_AUTH_DISABLE_LOGIN_FORM=false # - GF_AUTH_GOOGLE_ENABLED=true # - GF_AUTH_GOOGLE_CLIENT_ID=012345678912-testestest.apps.googleusercontent.com # - GF_AUTH_GOOGLE_CLIENT_SECRET=rhtsjyrkjytjkydtjyjdyj # - GF_AUTH_GOOGLE_ALLOWED_DOMAINS=grafana.com # - GF_AUTH_GOOGLE_ALLOW_SIGN_UP=true networks: monitor:   prometheus 設定檔增加來源\n/home/carter/grafana/data/prometheus/prometheus.yml\n1 2 3 4  # Job, for nginx_exporter - job_name: \u0026#39;nginx_exporter\u0026#39; static_configs: - targets: [\u0026#39;nginx_ip:9113\u0026#39;] # choose port number   ","date":"2024-09-20T00:00:00Z","image":"https://loveflee.github.io/p/grafana/grafana_hu79784a093fb7c5c72dd38a1ce913641f_133743_120x120_fill_box_smart1_3.png","permalink":"https://loveflee.github.io/p/grafana/","title":"Nginx-Prometheus-Exporter"},{"content":"參考來源 github Modsecurity\n2024-09-16 當前為 OWASP_CRS/4.6.0\ndocker modsecurity\ndocker compose nginx\n參數設置說明\n官版 docker-compose.yaml\ndocker-compose.yaml my docker-docmpose.yaml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  version: \u0026#39;3\u0026#39; services: waf: image: owasp/modsecurity-crs:nginx container_name: waf ports: - \u0026#34;80:80\u0026#34; # 將容器的80端口映射到主機的80端口 - \u0026#34;443:443\u0026#34; # 如果需要 HTTPS，也可以映射443端口 # - \u0026#34;12081:8080\u0026#34; volumes: - /etc/localtime:/etc/localtime - ./nginx.conf.template:/etc/nginx/templates/nginx.conf.template:rw # 掛載自定義的 Nginx 配置文件 - ./main.conf:/etc/nginx/templates/main.conf:rw # - ./conf.d:/etc/nginx/conf.d # 可選：掛載自定義的 ModSecurity 配置文件 - ./mysite:/etc/nginx/mysite:rw - ./ssl/domain:/etc/ssl/domain:ro - ./crs:/etc/modsecurity.d/owasp-crs/crs:rw environment: - PARANOIA=1 # 設置 paranoia level, 默認是 PL1 restart: always   plugin 主頁 github\nnextcloud\nWordPress\nModsecurity path docker 裡的路徑結構\n1  docker compose exec waf bash   modsecurity conf\n1  /etc/modsecurity.d/modsecurity.conf   rule path\n1  /etc/modsecurity.d/owasp-crs/rules   plugin path 外掛放置路徑\n1  /etc/modsecurity.d/owasp-crs/plugins   設置plugin nginx conf\n1 2 3  server { modsecurity on; modsecurity_rules_file /etc/modsecurity.d/owasp-crs/crs/cloud.conf;   nextcloud plugin 替換 crs 為docker 路徑結構 /etc/modsecurity.d/owasp-crs/crs\ncloud.conf\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  # 覆蓋請求限制 # 限制有檔名的文件最大上傳 10GB = 131072000 SecRequestBodyLimit 10737418240 # 超過設置的拒絕 SecRequestBodyLimitAction Reject # 限制沒有檔名的文件最大上傳 256k SecRequestBodyNoFilesLimit 262144 # 為Localhost-nginx編譯連結器版本根據docker結構編修 Include /etc/modsecurity.d/owasp-crs/crs/nextcloud-rule-exclusions-plugin/exclude.conf Include /etc/modsecurity.d/owasp-crs/crs/nextcloud-rule-exclusions-plugin/nextcloud-rule-exclusions-before.conf Include /etc/modsecurity.d/owasp-crs/crs/nextcloud-rule-exclusions-plugin/nextcloud-rule-exclusions-config.conf Include /etc/modsecurity.d/modsecurity.conf Include /etc/modsecurity.d/owasp-crs/crs-setup.conf Include /etc/modsecurity.d/owasp-crs/rules/*.conf   exclude.conf\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  SecRule \u0026amp;TX:nextcloud-rule-exclusions-plugin_enabled \u0026#34;@eq 0\u0026#34; \\ \u0026#34;id:9508010,\\ phase:1,\\ pass,\\ nolog,\\ ver:\u0026#39;nextcloud-rule-exclusions-plugin/1.2.0\u0026#39;,\\ setvar:\u0026#39;tx.nextcloud-rule-exclusions-plugin_enabled=1\u0026#39;\u0026#34; # 有些檔名會被封鎖 排除目錄規則 id=930130 在特定目錄下的應用 SecRule REQUEST_URI \u0026#34;@beginsWith /remote.php/dav/files/username1/blog/\u0026#34; \\ \u0026#34;id:10001,phase:1,nolog,pass,t:none,ctl:ruleRemoveById=930130\u0026#34; # 說明： # - id:10001 是這條規則的 ID，您可以使用不同的 ID 來區分。 # - phase:1 指定規則在哪個階段執行（通常在第 1 階段應用）。 # - nolog 和 pass 指示當匹配時不記錄日志並允許請求繼續。 # - ctl:ruleRemoveById=930130 表示在匹配到此 URI 時排除規則 930130 的應用。 # 使用正則表達式匹配多個目錄 #SecRule REQUEST_URI \u0026#34;@rx ^/remote\\.php/dav/files/(username1/blog|username2/projects|username3/documents)/\u0026#34; \\ # \u0026#34;id:10004,phase:1,nolog,pass,t:none,ctl:ruleRemoveById=930130\u0026#34; # 放寬文件上傳限制 SecRule REQUEST_FILENAME \u0026#34;@rx /(?:remote\\.php|index\\.php)/\u0026#34; \\ \u0026#34;id:10002,phase:2,t:none,nolog,pass,setvar:\u0026#39;tx.restricted_extensions=.bak/ .config/ .conf/\u0026#39;\u0026#34;   根據nextcloud plugin要求 外掛命名為 crs/nextcloud-rule-exclusions-plugin\n後將兩個conf放置其下 nextcloud-rule-exclusions-before.conf 與 nextcloud-rule-exclusions-config.conf\n來原: nextcloud plugin\n加大apache2容器上傳 解決在網頁上傳 413 問題\nfile/Dockerfile-app\n1 2 3 4 5  # 增加上傳 16GB = 17179869184 RUN echo \u0026#34;LimitRequestBody 17179869184\u0026#34; \u0026gt;\u0026gt; /etc/apache2/apache2.conf # 重啟 Apache 載入新設定 RUN apachectl restart   至此 modsceurity 設置完成\n","date":"2024-09-16T00:00:00Z","image":"https://loveflee.github.io/p/x/modsecurity_hu07e0207d2f477942fe3c45c7afc821d3_15909_120x120_fill_box_smart1_3.png","permalink":"https://loveflee.github.io/p/x/","title":"modsecurity"},{"content":"proxmox 開源作業系統 Proxmox\nVm: Home Assistant Vm HA\nLxc Docker Nextcloud Lxc Docker fpm-nextcloud-nginx\nLxc Docker Jellyfin Nvidia Gpu Jellyfin 搭配 Nvidia Gpu P600 轉檔加速\nVm Truenas Vm Truenas 用來備份 pve dataset\n","date":"2024-07-24T00:00:00Z","image":"https://loveflee.github.io/p/pve/a0pve01_hu42be8b8ff55ad2150ad7ec4a7ed5d8cd_88705_120x120_fill_box_smart1_3.png","permalink":"https://loveflee.github.io/p/pve/","title":"用 Proxmox 構建家用伺服器"},{"content":"Frigate 官方網站 更新於2024/08/28 https://frigate.video/ 說明文件 https://docs.frigate.video/\nNvidia docker-compose.yaml ubuntu 22.04 docker compose frigate/ 注意：nvidia-drive nvidia-docker2\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  version: \u0026#39;3.9\u0026#39; services: frigate: container_name: frigate privileged: true restart: unless-stopped image: ghcr.io/blakeblackshear/frigate:0.12.0-tensorrt # runtime: nvidia deploy: resources: reservations: devices: - capabilities: [gpu] shm_size: \u0026#34;512mb\u0026#34; # update for your cameras based on calculation above # devices: # - /dev/bus/usb:/dev/bus/usb #coral tpu AI辨識 # - /dev/apex_0:/dev/apex_0 #直通 PCIe Coral,driver \u0026gt; https://coral.ai/docs/m2/get-started/#2a-on-linux # - /dev/dri/renderD128 # for intel gpu hardware volumes: - /etc/localtime:/etc/localtime:ro - ./config:/config - ./trt-models:/trt-models # - ./nvr-data:/media/frigate # - /vm31/nvr-data:/media/frigate - /root/smb:/media/frigate - type: tmpfs # Optional: 1GB of memory, reduces SSD/SD Card wear target: /tmp/cache tmpfs: size: 1000000000 ports: - \u0026#34;5000:5000\u0026#34; - \u0026#34;1935:1935\u0026#34; # RTMP feeds - \u0026#34;8554:8554\u0026#34; # RTSP feeds - \u0026#34;8555:8555/tcp\u0026#34; # WebRTC over tcp - \u0026#34;8555:8555/udp\u0026#34; # WebRTC over udp environment: FRIGATE_RTSP_PASSWORD: \u0026#34;passwd\u0026#34; NVIDIA_VISIBLE_DEVICES: all NVIDIA_DRIVER_CAPABILITIES: compute,video,utility   Nvidia config/cnfig.yml 官網配置說明 https://docs.frigate.video/configuration/ tensorrt 建構 https://docs.frigate.video/configuration/detectors#nvidia-tensorrt-detectorui: use_experimental: false live_mode: mse mqtt: enabled: true host: ha ip port: 1883 topic_prefix: frigate client_id: frigate user: mqttuser password: mqttuser stats_interval: 300 ffmpeg: hwaccel_args: preset-nvidia-h264 #nvidia gpu output_args: record: preset-record-generic-audio-aac #sound out # hwaccel_args: preset-vaapi #錄影秒數 record: expire_interval: 15 enabled: True retain: days: 7 mode: motion # 註解掉 mode:連續錄影 motion 運動檢測 active_objects 物體移動 all 包含運動跟物體 events: # pre_capture: 3 #偵測錄影前提前1秒 # post_capture: 3 #偵測錄影後剪輯往後3秒 retain: default: 14 mode: active_objects objects: person: 7 #偵測器(運動檢測) detectors: tensorrt: type: tensorrt device: 0 #This is the default, select the first GPU model: path: /trt-models/yolov7-tiny-416.trt input_tensor: nchw input_pixel_format: rgb width: 416 height: 416 objects: track: - person filters: person: min_area: 5000 max_area: 100000 snapshots: enabled: True clean_copy: True timestamp: False bounding_box: True crop: False height: 175 required_zones: [] retain: default: 7 objects: person: 7 #錄影時間戳設置參數 timestamp_style: position: \u0026#34;tl\u0026#34; #\u0026#34;tl\u0026#34; (top left), \u0026#34;tr\u0026#34; (top right), \u0026#34;bl\u0026#34; (bottom left), \u0026#34;br\u0026#34; (bottom right) format: \u0026#34;%m/%d/%Y %H:%M:%S\u0026#34; color: red: 255 green: 255 blue: 255 thickness: 2 effect: shadow go2rtc: streams: gate: - \u0026#34;ffmpeg:rtsp://admin:pwsswd@192.168.88.53:554/stream1#video=copy#audio=copy#audio=aac\u0026#34; gate_sub: - \u0026#34;ffmpeg:rtsp://admin:passwd@192.168.88.53:554/stream2#video=copy#audio=copy#audio=aac\u0026#34; 3f: - \u0026#34;ffmpeg:rtsp://admin:passwd@192.168.88.54:554/stream1#video=copy#audio=copy#audio=aac\u0026#34; 3f_sub: - \u0026#34;ffmpeg:rtsp://admin:passwd@192.168.88.54:554/stream2#video=copy#audio=copy#audio=aac\u0026#34; webrtc: candidates: - 127.0.0.1:8555 - stun:8555 cameras: gate: ffmpeg: inputs: - path: rtsp://127.0.0.1:8554/gate input_args: preset-rtsp-restream roles: - record - path: rtsp://127.0.0.1:8554/gate_sub input_args: preset-rtsp-restream roles: - detect record: enabled: True detect: width: 640 height: 360 fps: 7 objects: track: - person filters: person: mask: - 0,190,135,128,138,90,252,95,270,149,483,165,561,360,640,360,640,0,0,0 min_score: 0.4 threshold: 0.5 min_area: 700 snapshots: enabled: true timestamp: true bounding_box: true crop: True height: 500 retain: default: 3 zones: zone_0: coordinates: 282,360,552,360,482,164,271,163,271,90,225,92,141,85,136,129,0,201,0,360 motion: mask: - 478,178,566,360,640,360,640,0,359,0,0,0,0,89,273,90,279,152 - 148,135,159,0,0,0,0,198 3f: ffmpeg: inputs: - path: rtsp://127.0.0.1:8554/3f input_args: preset-rtsp-restream roles: - record - path: rtsp://127.0.0.1:8554/3f_sub input_args: preset-rtsp-restream roles: - detect record: enabled: True detect: width: 640 height: 360 fps: 5 objects: track: - person filters: person: mask: - 0,0,0,311,640,307,640,360,0,360 min_score: 0.4 threshold: 0.5 min_area: 700 zones: zone_0: coordinates: 640,360,640,42,0,39,0,360 motion: mask: - 640,110,640,0,0,0,0,33 snapshots: enabled: true timestamp: true bounding_box: true crop: True height: 500 retain: default: 3 #detectors: # coral: # type: edgetpu # device: usb rtmp: enabled: false birdseye: enabled: True restream: False width: 1920 height: 1080 quality: 8 mode: continuous live: height: 640 quality: 1   Intel Gpu docker-compose.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  version: \u0026#39;3.9\u0026#39; services: frigate: container_name: frigate privileged: true restart: unless-stopped image: ghcr.io/blakeblackshear/frigate:stable cap_add: - CAP_PERFMON shm_size: \u0026#34;128mb\u0026#34; # update for your cameras based on calculation above devices: # - /dev/bus/usb:/dev/bus/usb #coral tpu AI辨識 # - /dev/apex_0:/dev/apex_0 #直通 PCIe Coral,driver \u0026gt; https://coral.ai/docs/m2/get-started/#2a-on-linux - /dev/dri/renderD128 # for intel gpu hardware volumes: - /etc/localtime:/etc/localtime:ro - ./config:/config # - ./nvr-data:/media/frigate - /root/smb:/media/frigate - type: tmpfs # Optional: 1GB of memory, reduces SSD/SD Card wear target: /tmp/cache tmpfs: size: 1000000000 ports: - \u0026#34;5000:5000\u0026#34; - \u0026#34;1935:1935\u0026#34; # RTMP feeds - \u0026#34;8554:8554\u0026#34; # RTSP feeds - \u0026#34;8555:8555/tcp\u0026#34; # WebRTC over tcp - \u0026#34;8555:8555/udp\u0026#34; # WebRTC over udp environment: FRIGATE_RTSP_PASSWORD: \u0026#34;passwd\u0026#34;   Intel Gpu config/config.yml 官網配置說明 https://docs.frigate.video/configuration/ OpenVINO檢測器 https://docs.frigate.video/configuration/detectors#openvino-detectorui: use_experimental: false live_mode: mse mqtt: enabled: true host: ha ip port: 1883 topic_prefix: frigate client_id: frigate user: mqttuser password: mqttuser stats_interval: 300 #intel gpu 輸出聲音(錄影) ffmpeg: hwaccel_args: preset-vaapi output_args: record: preset-record-generic-audio-aac #錄影秒數 record: expire_interval: 10 enabled: True retain: days: 7 mode: motion # 註解掉mode 7/24錄影 motion運動檢測 active_objects物體移動 all包含運動跟物體 events: pre_capture: 4 #偵測錄影前提前1秒 post_capture: 3 #偵測錄影後剪輯往後3秒 retain: default: 14 mode: active_objects objects: person: 7 #偵測器(運動偵測) detectors: ov: type: openvino device: AUTO model: path: /openvino-model/ssdlite_mobilenet_v2.xml model: width: 300 height: 300 input_tensor: nhwc input_pixel_format: bgr labelmap_path: /openvino-model/coco_91cl_bkgr.txt objects: track: - person filters: person: min_area: 5000 max_area: 100000 snapshots: enabled: True clean_copy: True timestamp: False bounding_box: True crop: False height: 175 required_zones: [] retain: default: 7 objects: person: 7 #錄影時間戳設置參數 thickness:字體大小 effect:字體陰影 timestamp_style: position: \u0026#34;tl\u0026#34; format: \u0026#34;%m/%d/%Y %H:%M:%S\u0026#34; color: red: 255 green: 255 blue: 255 thickness: 2 effect: shadow go2rtc: streams: gate: - \u0026#34;ffmpeg:rtsp://admin:passwd@192.168.88.53:554/stream1#video=copy#audio=copy#audio=aac\u0026#34; gate_sub: - \u0026#34;ffmpeg:rtsp://admin:passwd@192.168.88.53:554/stream2#video=copy#audio=copy#audio=aac\u0026#34; 3f: - \u0026#34;ffmpeg:rtsp://admin:passwd@192.168.88.54:554/stream1#video=copy#audio=copy#audio=aac\u0026#34; 3f_sub: - \u0026#34;ffmpeg:rtsp://admin:passwd@192.168.88.54:554/stream2#video=copy#audio=copy#audio=aac\u0026#34; webrtc: candidates: - 127.0.0.1:8555 - stun:8555 cameras: gate: ffmpeg: inputs: - path: rtsp://127.0.0.1:8554/gate input_args: preset-rtsp-restream roles: - record - path: rtsp://127.0.0.1:8554/gate_sub input_args: preset-rtsp-restream roles: - detect record: enabled: True detect: width: 640 height: 360 fps: 5 objects: track: - person filters: person: mask: - 0,190,135,128,138,90,252,95,270,149,483,165,561,360,640,360,640,0,0,0 min_score: 0.4 threshold: 0.5 min_area: 700 snapshots: enabled: true timestamp: true bounding_box: true crop: True height: 500 retain: default: 3 zones: zone_0: coordinates: 282,360,552,360,482,164,271,163,271,90,225,92,141,85,136,129,0,201,0,360 motion: mask: - 478,178,566,360,640,360,640,0,359,0,0,0,0,89,273,90,279,152 - 148,135,159,0,0,0,0,198 3f: ffmpeg: inputs: - path: rtsp://127.0.0.1:8554/3f input_args: preset-rtsp-restream roles: - record - path: rtsp://127.0.0.1:8554/3f_sub input_args: preset-rtsp-restream roles: - detect record: enabled: True detect: width: 640 height: 360 fps: 5 objects: track: - person filters: person: mask: # - 0,360,640,360,640,47,0,44 min_score: 0.4 threshold: 0.5 min_area: 700 zones: zone_0: coordinates: 640,360,640,42,0,39,0,360 motion: mask: - 640,110,640,0,0,0,0,33 snapshots: enabled: true timestamp: true bounding_box: true required_zones: - gateclose_in - gate_whole_area crop: True height: 500 retain: default: 3 #detectors: # coral: # type: edgetpu # device: usb rtmp: enabled: false birdseye: enabled: True restream: False width: 1920 height: 1080 quality: 8 mode: continuous live: height: 640 quality: 1   HA onvif and ptz ha 先用 onvif camera 導入 ipcam onvif 控制 ipcam  Ha 設定 \u0026gt; 自動化 \u0026gt; 腳本 \u0026gt; yaml編輯 貼上後再用視覺化編輯 \u0026gt; 連續 選取 ipcam distance: 0.12 \u0026lt; 移動速度調整   左\n1 2 3 4 5 6 7 8 9 10  alias: turn_left sequence: - service: onvif.ptz data: pan: RIGHT distance: 0.12 target: device_id: 24ff4dd62b369f46d24f99486240f22f mode: single icon: mdi:arrow-left-bold-circle   右\n1 2 3 4 5 6 7 8 9 10  alias: turn_right sequence: - service: onvif.ptz data: pan: LEFT distance: 0.12 target: device_id: 24ff4dd62b369f46d24f99486240f22f mode: single icon: mdi:arrow-right-bold-circle   上\n1 2 3 4 5 6 7 8 9 10  alias: turn_up sequence: - service: onvif.ptz data: distance: 0.12 tilt: DOWN target: device_id: 24ff4dd62b369f46d24f99486240f22f mode: single icon: mdi:arrow-up-bold-circle   下\n1 2 3 4 5 6 7 8 9 10  alias: turn_down sequence: - service: onvif.ptz data: distance: 0.12 tilt: UP target: device_id: 24ff4dd62b369f46d24f99486240f22f mode: single icon: mdi:arrow-down-bold-circle   預設點 (於 IPcam-APP 裡設定)\n1 2 3 4 5 6 7 8 9 10 11  alias: preset1 sequence: - service: onvif.ptz data: distance: 0.12 preset: \u0026#34;1\u0026#34; move_mode: GotoPreset target: device_id: 24ff4dd62b369f46d24f99486240f22f mode: single icon: mdi:arrow-collapse-all   拉近(放大物體)\n1 2 3 4 5 6 7 8 9 10  alias: 3f_in sequence: - service: onvif.ptz data: distance: 0.15 zoom: ZOOM_IN target: device_id: 1f5322054b437303a2af54ad0e6f053c mode: single icon: mdi:arrow-expand   拉遠(縮小物體)\n1 2 3 4 5 6 7 8 9 10  alias: 3f_out sequence: - service: onvif.ptz data: distance: 0.15 zoom: ZOOM_OUT target: device_id: 1f5322054b437303a2af54ad0e6f053c mode: single icon: mdi:arrow-collapse   HA frigate card 於 ha 內使用 frigate card hacs 導入 frigate card   垂直卡 ( frigate card 加 水平卡 - onvif 控制 )  entity: script.1702054234951 entity: script.1702057221703 entity: script.turn_down entity: script.turn_right 4個 entity 為移動控制腳本  需修改對應到正確名稱,建議各動作都檢查\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79  type: vertical-stack cards: - type: custom:frigate-card cameras: - camera_entity: camera.gate live_provider: jsmpeg hide: false view: timeout_seconds: 0 update_force: false update_cycle_camera: false default: live update_seconds: 0 live: preload: true zoomable: true lazy_load: true microphone: always_connected: true menu: buttons: \u0026#39;mute:\u0026#39;: enable: true microphone: enabled: true alignment: matching icon: mdi:microphone-settings type: momentary play: enable: true microphone: enabled: true alignment: matching icon: mdi:microphone type: momentary alignment: bottom style: outside - type: horizontal-stack cards: - type: custom:button-card show_name: true show_icon: true tap_action: action: toggle entity: script.1702054234951 name: L icon_height: 20px - type: custom:button-card show_name: true show_icon: true tap_action: action: toggle entity: script.1702057221703 name: Up icon_height: 20px - type: custom:button-card show_name: true show_icon: true tap_action: action: toggle entity: script.turn_down name: Down icon_height: 20px - type: custom:button-card show_name: true show_icon: true tap_action: action: toggle entity: script.turn_right name: R icon_height: 20px - type: custom:button-card show_name: true show_icon: true tap_action: action: toggle entity: script.preset1 name: G-P icon_height: 20px   Line 通知觸發偵測 Line通知教學 Line Notify  https://github.com/loveflee/autosend-photo-inha-line 設定 \u0026gt; 自動化 \u0026gt; 新增自動化 \u0026gt; 右上三小點以YAML編輯 複製貼上後再以視覺化編輯去修正各個設置\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  alias: 電動門移動達3秒偵測 description: 車庫人形偵測 trigger: - platform: state entity_id: - binary_sensor.gate_person_occupancy for: hours: 0 minutes: 0 seconds: 3 to: \u0026#34;on\u0026#34; from: \u0026#34;off\u0026#34; condition: - condition: time after: \u0026#34;00:05:00\u0026#34; before: \u0026#34;07:00:00\u0026#34; enabled: false action: - service: notify.line_notification data: message: Gate all occupancy 移動偵測已達4秒 - service: camera.record data: lookback: 0 filename: /media/\u0026#39;{{(\u0026#39;%Y%m%d%H%M\u0026#39;) }}\u0026#39;.mp4 duration: 20 target: device_id: 24ff4dd62b369f46d24f99486240f22f enabled: false mode: single   ","date":"2023-12-14T00:00:00Z","image":"https://loveflee.github.io/p/frigate/002_hu0ef56f75a8024440a0638948000910e6_132224_120x120_fill_q75_box_smart1.jpg","permalink":"https://loveflee.github.io/p/frigate/","title":"Docker Compose Frigate - NVR"},{"content":"參考來源 https://blog.lass.cc/posts/how-to-build-hugo-with-docker/\n新增文章 mkdir ~/blog/src/content/post/newpostID nano ~/blog/src/content/post/newpostID/index.md 以本篇來說 mkdir ~/blog/src/content/post/docker01 cp ~/index.md ~/blog/src/content/post/docker01/ nano ~/blog/src/content/post/docker01/index.md\n貼圖語法 1 2 3 4 5  貼圖要在同目錄 貼圖語法 ![圖片說明會在圖下方](圖檔檔名.jpg) 範例： ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg)   發表文章 1  docker-compose up --build -d   ","date":"2023-11-30T00:00:00Z","image":"https://loveflee.github.io/p/hugo/docker_hu8fc112533065eda6f9a0c57ee748feb0_60918_120x120_fill_q75_box_smart1.jpg","permalink":"https://loveflee.github.io/p/hugo/","title":"docker compose Hugo"},{"content":"正文測試 很難玩樂,搞了好久才改一點點,不要問,問就是搞砸了\u0026hellip;這版型有喜歡\u0026hellip;\n引用  引用的語法,留下當備註吧\u0026hellip;\n戳它聽歌開新頁面\u0026raquo; 最暖的憂傷 - 田馥甄\n 貼圖 貼圖語法 1 2 3  ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg)   相册语法来自 Typlog\n","date":"2023-11-29T00:00:00Z","image":"https://loveflee.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://loveflee.github.io/p/test-chinese/","title":"Test 01"},{"content":"本文提供了可在 Hugo 內容檔案中使用的基本 Markdown 語法範例，也展示了 Hugo 主題中是否使用 CSS 裝飾基本 HTML 元素\nHeadings 標題 以下 HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; 代表六個階級的章節標題 \u0026lt;h1\u0026gt; 最大 \u0026lt;h6\u0026gt; 最小\nH1 H2 H3 H4 H5 H6 Paragraph 段落 內文在說故事,砍了\u0026hellip;\nBlockquotes 區塊引用 blockquote 元素表示從其他來源引用的內容可選地帶有必須位於or元素內的引文 footer or cite 並且可選地帶有內聯更改（例如註釋和縮寫）\nBlockquote without attribution 沒有歸屬的區塊引用  然後，為了鑄造安達普，要給予的知識會被相應地削減\n注意，可以在區塊引用中使用Markdown 語法\n Blockquote with attribution 有歸屬的區塊引用  不要透過共享記憶體來通信，而是透過通信來共享記憶體\n— Rob Pike1\n Tables 表格 表格不是核心 Markdown 規範的一部分，但 Hugo 支援開箱即用地支援它們\n   Name Age     Bob 27   Alice 23    表格內內聯 Markdown    Italics Bold Code     italics bold code       A B C D E F     Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien    Code Blocks 程式碼區塊 Code block with backticks 帶有反引號的程式碼區塊 1 2 3 4 5 6 7 8 9 10  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Code block indented with four spaces 程式碼區塊縮排四個空格 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 帶有 Hugo 內部高亮短代碼的程式碼區塊 1 2 3 4 5 6 7 8 9 10  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Diff code block 差異代碼區塊 1 2 3 4 5  [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;]   List Types 清單類型 Ordered List 有序列表  First item Second item Third item  Unordered List 無序列表  List item Another item And another item  Nested list 嵌套列表  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements 其他元素 — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image 圖片超連結 \n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://loveflee.github.io/p/markdown-%E6%96%87%E6%B3%95%E6%8C%87%E5%8D%97/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://loveflee.github.io/p/markdown-%E6%96%87%E6%B3%95%E6%8C%87%E5%8D%97/","title":"Markdown 文法指南"},{"content":"Hugo 附帶了多個用於豐富內容的 內建短代碼 以及一個隱私配置和一組簡單的短代碼 隱私配置 ，可支援各種社交媒體嵌入的靜態和無 JS 版本\n YouTube 隱私增強簡碼    Twitter 簡單簡碼 .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Design Reviewed | Graphic Design History (@DesignReviewed) January 17, 2019  Vimeo 簡單簡碼  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }   bilibilibi 簡碼 \r\rGist 簡碼  Gitlab 片段簡碼  Quote 簡碼 Stack adds a quote shortcode. For example:\n Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2019-03-10T00:00:00Z","permalink":"https://loveflee.github.io/p/%E5%85%A7%E5%AE%B9%E8%B1%90%E5%AF%8C/","title":"內容豐富"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n他回來並摧毀了你，我會害怕男人的托里斯，他不會從脖子下面拿走燈光，他有使用和阿克頓，他們不承受的憤怒。 而當山色暖和的時候，荒涼的時光就會稀稀拉拉地照到你想認識雲花的父親身上！ 葉子和眾神的孩子  Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt \nThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://loveflee.github.io/p/%E4%BD%94%E4%BD%8D%E7%AC%A6/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://loveflee.github.io/p/%E4%BD%94%E4%BD%8D%E7%AC%A6/","title":"佔位符"},{"content":"Hugo 專案中的數學符號可以透過使用第三方 JavaScript 函式庫來啟用\n在本例中我們將使用 KaTeX\n 在下面創建一個部分 /layouts/partials/math.html 在此部分中引用 自動渲染擴充功能 或在本機上託管這些腳本 將部分內容包含在範本中，如下所示:  1 2 3  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }}    若要全域啟用 KaTex，請將參數設定 math to true 專案配置中的 若要在每頁啟用 KaTex，請 math: true 在內容檔案中包含該參數  注意: 使用 Supported TeX Functions 的線上參考\nExamples 範例 Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://loveflee.github.io/p/%E6%95%B8%E5%AD%B8%E6%8E%92%E7%89%88/","title":"數學排版"},{"content":"可以透過多種方式在 Hugo 項目中啟用表情符號\n表情符號 可以直接在模板或 Inline Shortcodes 中呼叫\n若要全域啟用表情符號，請在網站配置 enableEmoji to true in your site\u0026rsquo;s configuration 然後可以直接在內容檔案中鍵入表情符號簡寫程式碼\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet 是表情符號速記代碼的有用參考\n 注意 注意：上述步驟在 Hugo 中啟用了 Unicode 標準表情符號字元和序列，但這些字形的呈現取決於瀏覽器和平台。若要設定表情符號樣式，您可以使用第三方表情符號字體或字體堆疊；例如\n1 2 3  .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }  ","date":"2019-03-05T00:00:00Z","image":"https://loveflee.github.io/p/%E8%A1%A8%E6%83%85%E7%AC%A6%E8%99%9F%E6%94%AF%E6%8C%81/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://loveflee.github.io/p/%E8%A1%A8%E6%83%85%E7%AC%A6%E8%99%9F%E6%94%AF%E6%8C%81/","title":"表情符號支持"},{"content":"參考來源 Intel Gpu  https://gist.github.com/scyto/e4e3de35ee23fdb4ae5d5a3b85c16ed3\nHost 安裝\n1 2  apt update \u0026amp;\u0026amp; apt install pve-headers-$(uname -r) apt install git sysfsutils dkms build-* unzip -y   新增 apt sources.list intel non-free\n1  nano /etc/apt/sources.list   添加以下\n1 2 3 4 5  #non-free firmwares deb http://deb.debian.org/debian bookworm non-free-firmware #non-free drivers and components deb http://deb.debian.org/debian bookworm non-free   存檔後執行\n1  apt update \u0026amp;\u0026amp; apt install intel-media-va-driver-non-free intel-gpu-tools vainfo   複製 proxmox 安裝中缺少的驅動程式，並將在 dmesg 中刪除此檔的 -2 錯誤\n1 2 3  wget -r -nd -e robots=no -A \u0026#39;*.bin\u0026#39; --accept-regex \u0026#39;/plain/\u0026#39; https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/tree/i915/adlp_dmc.bin cp adlp_dmc.bin /lib/firmware/i915/   編譯並安裝新驅動程式 克隆 github 專案\n1 2  cd ~ git clone https://github.com/strongtz/i915-sriov-dkms.git   修改 dkms.conf\n1 2  cd i915-sriov-dkms nano dkms.conf   更改這兩行，如下所示：\n1 2  PACKAGE_NAME=\u0026#34;i915-sriov-dkms\u0026#34; PACKAGE_VERSION=\u0026#34;6.5\u0026#34;   保存檔案 編譯和安裝驅動程式\n1 2 3  cd ~ mv i915-sriov-dkms/ /usr/src/i915-sriov-dkms-6.5 dkms install --force -m i915-sriov-dkms -v 6.5   驗證模組是否已安裝\n1  dkms status   卸載 dkms i915\n1  dkms remove i915-sriov-dkms/6.5   修改 grub\n1  nano /etc/default/grub   修改這一行,如原本有其他新增,保持原本的不變,新增上去\n1  GRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;quiet intel_iommu=on iommu=pt i915.enable_guc=3 i915.max_vfs=7\u0026#34;   存檔退出,更新grub\n1 2 3 4  update-grub update-initramfs -u #or update-initramfs -c -k all   如update-initramfs -u  出現以下錯誤\n1 2 3  W: Possible missing firmware /lib/firmware/i915/mtl_gsc_102.0.0.1511.bin for module i915 W: Possible missing firmware /lib/firmware/i915/mtl_huc_8.4.3_gsc.bin for module i915 W: Possible missing firmware /lib/firmware/i915/mtl_guc_70.6.4.bin for module i915   https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/tree/i915/\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  cd ~ \u0026amp;\u0026amp; mkdir less \u0026amp;\u0026amp; cd less wget https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/tree/i915/mtl_huc_gsc.bin -O mtl_huc_8.4.3_gsc.bin wget https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/tree/i915/mtl_guc_70.bin -O mtl_guc_70.6.4.bin wget https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/tree/i915/mtl_gsc_1.bin -O mtl_gsc_102.0.0.1511.bin cp mtl_gsc_102.0.0.1511.bin mtl_huc_8.4.3_gsc.bin mtl_guc_70.6.4.bin /lib/firmware/i915/ ###以下未優化 cd ~;mkdir less;cd less wget https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/tree/i915/mtl_huc_gsc.bin cp mtl_huc_gsc.bin mtl_huc_8.4.3_gsc.bin wget https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/tree/i915/mtl_guc_70.bin cp mtl_guc_70.bin mtl_guc_70.6.4.bin wget https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/tree/i915/mtl_gsc_1.bin cp mtl_gsc_1.bin mtl_gsc_102.0.0.1511.bin cp mtl_gsc_102.0.0.1511.bin /lib/firmware/i915/ cp mtl_huc_8.4.3_gsc.bin /lib/firmware/i915/ cp mtl_guc_70.6.4.bin /lib/firmware/i915/   補完驅動\n1 2 3  update-initramfs -u #or update-initramfs -c -k all   zfs uefi\n1  nano /etc/kernel/cmdline   修改\n1  root=ZFS=rpool/ROOT/pve-1 boot=zfs intel_iommu=on iommu=pt i915.enable_guc=3 i915.max_vfs=7   查找PCIe總線並更新 sysfs.conf\n1  lspci | grep VGA   各代intel cpu 支援的gpu虛擬化列表 https://www.intel.com.tw/content/www/tw/zh/support/articles/000093216/graphics/processor-graphics.html 只有10代以上支援VGPU 應該輸出\n1  00:02.0 VGA compatible controller: Intel Corporation CoffeeLake-H GT2 [UHD Graphics 630] (rev 02)   取最左邊的數組，並按如下方式添加到 sysfs.conf 中 注意，總線路徑上的所有後續零都是必需的\n1  echo \u0026#34;devices/pci0000:00/0000:00:02.0/sriov_numvfs = 7\u0026#34; \u0026gt; /etc/sysfs.conf   存檔退出 reboot 檢查設備\n1  dmesg | grep i915   最後兩行應如下所示：\n1 2  [ 7.591662] [drm] Initialized i915 1.6.0 20201103 for 0000:00:02.7 on minor 7 [ 7.591818] i915 0000:00:02.0: Enabled 7 VFs   如果沒有輸出，請仔細檢查所有步驟 使用 VAInfo 進行驗證/cardN N為0-7(VGPU編號),平台不同數量不同 10代1 13代7\n1  vainfo --display drm --device /dev/dri/cardN   檢查是否可以監控 VF 如果沒有，有問題\n1 2 3  intel_gpu_top -d drm:/dev/dri/renderD128 ls -l /dev/dri   在 Proxmox 中配置 vGPU 池  Datacenter(資料中心) \u0026gt; Resource Mappings  按兩下PCI設備add  將池命名為vGPU-Pool  映射 pve 1 的所有 7 個 VF，但不映射根設備，即 0000：00：02.x 而不是 0000：00：02 點擊create  在創建的池 lcikc 上，vGPU-Pool 旁邊的加號按鈕  選擇節點上的映射 = PVE 2，AD 所有設備，然後按兩下創建 對 PVE3 重複上述步驟  注意：具有PCI直通設備的計算機無法即時遷移，必須將其關閉，離線遷移到新節點，然後啟動  每次在PROXMOX中更新內核時，都應該執行以下操作 update the kernel using proxox ui\n1 2  dkms install -m i915-sriov-dkms -v 6.5 --force reboot    在不帶 vGPU 的情況下啟動VM，並將顯示設置為預設值 安裝 VirtIO 驅動程式 關閉虛擬機並將顯示更改為 VirtIO-GPU 將CPU類型更改為“host” 現在將 vGPU 池添加為 PCI 設備 創建 VM 時，添加 PCI 設備並添加 poool，如下所示： 現在啟動到 VM 並安裝英特爾提供的最新 IrisXe 驅動程式 現在，無論通過 webcolse VNC、SPICE 還是 RDP 用戶端連接，都應該有圖形加速\n 按照指南操作，在設備管理器中看到 Microsoft 基本顯示適配器 - 如果在 VM 設置中使用“顯示” Intel iGPU - 直通 有 2 個（或更多）選項來使用 iGPU。因為 Windows 11 自行決定使用哪種圖形\n編輯windiws11 VM conf 檔並添加\n1  args: -cpu Cooperlake,hv_relaxed,hv_spinlocks=0x1fff,hv_vapic,hv_time,+vmx   舊 cpu 6-10 直通包括獨顯+開啟內顯GVT-G https://home.gamer.com.tw/creationDetail.php?sn=5516262  开启iommu和GVT-g支持 https://www.xh86.me/?p=741\n1  nano /etc/kernel/cmdline   不要換行，往後加指令\n1  root=ZFS=rpool/ROOT/pve-1 boot=zfs intel_iommu=on iommu=pt pcie_acs_override=downstream video=efifb:off,vesafb:off i915.enable_guc=3 i915.max_vfs=2   指令解釋： intel_iommu=on 最白話的設定，開啟IOMMU iommu=pt 聽說是加強IOMMU的性能，也有人說不加也沒差，因為懶得比較，我就沒拿掉 pcie_acs_override=downstream 這個似乎是加強PCIE裝置的分組，我個人理解是： 沒加這行=分組後直通顯卡會包含繪圖裝置跟聲音裝置，直通一個另一個會跟著被直通 加入這行=分組後可以把繪圖裝置跟聲音裝置分別直通給不同VM video=efifb:off,vesafb:off 包刮了video的兩個設定： efifb:off是efi開機後載入fb0的設定，off的話當然就是不要開啟啦XD vesafb:off是vesa程序載入fb0的設定，我也不知道是啥，反正很多人在直通時把這行也加上去了，沒試過不加，總之就跟著加了，也是設定不要開啟  modprobe.d裡面的conf檔做設定\n1  nano /etc/modprobe.d/user.conf   檔案內容，直接用註解的方式解釋每個在做啥：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  # 黑名單，不讓程式開機就載入下面的驅動程式，顯卡才能夠直通 # A卡的驅動，我不想改就沒拿掉了 # N卡的linux內建基本驅動 # N卡的驅動 # 主機板聲音卡的驅動程式 # blacklist to stop driver loading blacklist radeon blacklist nouveau blacklist nvidia blacklist snd_hda_intel # code43迴避方式 # 聽說VM會出現code 43，是由於顯卡知道自己在虛擬環境而發error # 用下面的指令讓顯卡不發error # 不確定，總之我是這樣認為~ # kvm config to avoid code 43 options kvm ignore_msrs=1 #options report_ignored_msrs=0 #報錯修改為下面 options kvm report_ignored_msrs=N # 允許vfio模組發出中斷，應該是這樣 # 因為之後會載入去給PCIE裝置，這邊要設定允許 # IOMMU interrupts options vfio_iommu_type1 allow_unsafe_interrupts=1 # GVT-G配置 # gvt: 看自己要不要玩GVT-G，要=1，不要=0 # guc: 是否開啟低功耗什麼的，有GVT-G只能=0，否則想開=2/3 (3要看CPU是否支援huc) # INTEL Graphic config options i915 enable_gvt=1 #options i915 enable_guc=0 # 設定ZFS只能使用這麼多記憶體 # 設定邏輯就是預設2G + ((儲存空間每1T)=1G) * (16+1+1) = 20G，然後換算成byte # ZFS config #options zfs zfs_arc_max=21474836480   此篇結束!\nXeon e3 v5-6 core 5-7 參考 https://www.xh86.me/?p=741 intel gvt-g技術，目前只支援第五代，第六代和第七代英特爾core處理器以及E3 v4，E3 v5和E3 v6 Xeon處理器 開啟iommu和GVT-g 參考2 https://cetteup.com/216/how-to-use-an-intel-vgpu-for-plexs-hardware-accelerated-streaming-in-a-proxmox-vm/\n1 2 3 4  #grub nano /etc/default/grub #or zfs uefi nano /etc/kernel/cmdline   修改\n1 2 3 4  #grub GRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;quiet intel_iommu=on i915.enable_gvt=1\u0026#34; #zfs uefi root=ZFS=rpool/ROOT/pve-1 boot=zfs intel_iommu=on iommu=pt i915.enable_gvt=1   增加直通内核模塊\n1 2 3 4 5  echo vfio \u0026gt;\u0026gt; /etc/modules echo vfio_iommu_type1 \u0026gt;\u0026gt; /etc/modules echo vfio_pci \u0026gt;\u0026gt; /etc/modules echo vfio_virqfd \u0026gt;\u0026gt; /etc/modules echo kvmgt \u0026gt;\u0026gt; /etc/modules   查看顯卡編號(示例:編號需修改成自己的)\n1 2  lspci -n -s 00:02.0 00:02.0 0380: 8086:3e90   將 8086:3e90 加入直通\n1  echo \u0026#34;options vfio-pci ids=8086:3e90\u0026#34; \u0026gt; /etc/modprobe.d/vfio.conf   更新grub與開機載入模塊\n1 2  update-grub update-initramfs -c -k all   驗證 (02為intel gpu 如不同換成設備編號)\n1  ls /sys/bus/pci/devices/0000:00:02.0/mdev_supported_types/      ","date":"2019-01-02T00:00:00Z","permalink":"https://loveflee.github.io/p/intel/","title":"plex2"},{"content":"plex 參考來源 https://jocke.no/2022/02/23/plex-gpu-transcoding-in-docker-on-lxc-on-proxmox/\nPve host 特權 Lxc功能:fuse=1,nesting=1 主機和 LXC 容器都需要運行相同的驅動程式版本\n1 2 3 4 5 6 7 8 9 10 11 12 13  #驅動黑名單:開機不載入 echo -e \u0026#34;blacklist nouveau\\noptions nouveau modeset=0\u0026#34; \u0026gt; /etc/modprobe.d/blacklist-nouveau.conf nano /etc/kernel/cmdline add root=ZFS=rpool/ROOT/pve-1 boot=zfs intel_iommu=on #更新開機模組 update-initramfs -u proxmox-boot-tool refresh #安裝無頭驅動 apt install pve-headers-$(uname -r) #nvidia drive wget -O NVIDIA-Linux-x86_64-510.47.03.run https://us.download.nvidia.com/XFree86/Linux-x86_64/510.47.03/NVIDIA-Linux-x86_64-510.47.03.run chmod +x NVIDIA-Linux-x86_64-510.47.03.run   answer \u0026ldquo;no\u0026rdquo; when it asks if you want to install 32bit compability drivers 回答“否”當它詢問您是否要安裝 32 位元相容驅動程式時 answer \u0026ldquo;no\u0026rdquo; when it asks if it should update X config 回答“否”當它詢問是否應該更新 X-windows 配置時\n1  ./NVIDIA-Linux-x86_64-510.47.03.run   新增一些 udev 規則。這是為了確保載入正確的核心模組，並在啟動時建立所有相關的設備檔案\n1  echo -e \u0026#39;\\n# load nvidia modules\\nnvidia-drm\\nnvidia-uvm\u0026#39; \u0026gt;\u0026gt; /etc/modules-load.d/modules.conf   將以下內容添加到 /etc/udev/rules.d/70-nvidia.rules 啟動時會在/dev/中建立相關的裝置文件\n1  nano /etc/udev/rules.d/70-nvidia.rules   添加以下\n1 2 3  KERNEL==\u0026#34;nvidia\u0026#34;, RUN+=\u0026#34;/bin/bash -c \u0026#39;/usr/bin/nvidia-smi -L \u0026amp;\u0026amp; /bin/chmod 666 /dev/nvidia*\u0026#39;\u0026#34; KERNEL==\u0026#34;nvidia_uvm\u0026#34;, RUN+=\u0026#34;/bin/bash -c \u0026#39;/usr/bin/nvidia-modprobe -c0 -u \u0026amp;\u0026amp; /bin/chmod 0666 /dev/nvidia-uvm*\u0026#39;\u0026#34; SUBSYSTEM==\u0026#34;module\u0026#34;, ACTION==\u0026#34;add\u0026#34;, DEVPATH==\u0026#34;/module/nvidia\u0026#34;, RUN+=\u0026#34;/usr/bin/nvidia-modprobe -m\u0026#34;   避免在不使用 GPU 時卸載驅動程式/核心模組，應該執行 Nvidia 提供的持久性服務,驅動程式安裝後就可以使用它 https://docs.nvidia.com/deploy/driver-persistence/index.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  # 複製並解壓縮 cp /usr/share/doc/NVIDIA_GLX-1.0/samples/nvidia-persistenced-init.tar.bz2 . bunzip2 nvidia-persistenced-init.tar.bz2 tar -xf nvidia-persistenced-init.tar # 刪除舊的（如果有的話,以避免屏蔽服務） rm /etc/systemd/system/nvidia-persistenced.service # 安裝 chmod +x nvidia-persistenced-init/install.sh ./nvidia-persistenced-init/install.sh # 檢查是否正常 systemctl status nvidia-persistenced.service rm -rf nvidia-persistenced-init*   如果沒有任何錯誤，就可以重新啟動 Proxmox 主機。重新啟動後，應該會看到以下輸出 示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  nvidia-smi +-----------------------------------------------------------------------------+ | NVIDIA-SMI 390.157 Driver Version: 390.157 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 GeForce GTX 650 Off | 00000000:05:00.0 N/A | N/A | | 27% 42C P8 N/A / N/A | 183MiB / 978MiB | N/A Default | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: GPU Memory | | GPU PID Type Process name Usage | |=============================================================================| | 0 Not Supported | +-----------------------------------------------------------------------------+   添加 Lxc conf 內容 注意Pvehost group ID,每台主機不一,需修正 Pve host:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  ls -alh /dev/nvidia* crw-rw-rw- 1 root root 195, 0 12月 15 07:01 /dev/nvidia0 crw-rw-rw- 1 root root 195, 255 12月 15 07:01 /dev/nvidiactl crw-rw-rw- 1 root root 195, 254 12月 15 07:02 /dev/nvidia-modeset crw-rw-rw- 1 root root 510, 0 12月 15 07:01 /dev/nvidia-uvm crw-rw-rw- 1 root root 510, 1 12月 15 07:01 /dev/nvidia-uvm-tools /dev/nvidia-caps: 總用量 0 drw-rw-rw- 2 root root 80 12月 15 07:01 . drwxr-xr-x 23 root root 5.6K 12月 15 11:20 .. cr-------- 1 root root 236, 1 12月 15 07:01 nvidia-cap1 cr--r--r-- 1 root root 236, 2 12月 15 07:01 nvidia-cap2 lxc conf add lxc.cgroup2.devices.allow: c 195:* rwm lxc.cgroup2.devices.allow: c 510:* rwm lxc.cgroup2.devices.allow: c 236:* rwm lxc.mount.entry: /dev/nvidia0 dev/nvidia0 none bind,optional,create=file lxc.mount.entry: /dev/nvidiactl dev/nvidiactl none bind,optional,create=file lxc.mount.entry: /dev/nvidia-uvm dev/nvidia-uvm none bind,optional,create=file lxc.mount.entry: /dev/nvidia-modeset dev/nvidia-modeset none bind,optional,create=file lxc.mount.entry: /dev/nvidia-uvm-tools dev/nvidia-uvm-tools none bind,optional,create=file lxc.mount.entry: /dev/nvidia-uvm-tools dev/nvidia-caps/nvidia-cap1 none bind,optional,create=file lxc.mount.entry: /dev/nvidia-uvm-tools dev/nvidia-caps/nvidia-cap2 none bind,optional,create=file   Lxc 容器內操作 Lxc開機,進入Lxc執行以下\n1 2 3 4 5 6 7  wget -ONVIDIA-Linux-x86_64-510.47.03.run https://us.download.nvidia.com/XFree86/Linux-x86_64/510.47.03/NVIDIA-Linux-x86_64-510.47.03.run chmod +x NVIDIA-Linux-x86_64-510.47.03.run ./NVIDIA-Linux-x86_64-510.47.03.run --check # answer \u0026#34;no\u0026#34; when it asks if it should update X config ./NVIDIA-Linux-x86_64-510.47.03.run --no-kernel-module #安裝完驅動,驗證Lxc nvidia-smi輸出,如錯誤！檢查驅動版本與host一致否與 lxc.conf nvidia-smi   安裝 docker 相關\n1 2 3 4 5 6 7 8 9 10 11 12  #刪除使用apt安裝之docker apt remove docker-compose docker docker.io containerd runc # 從官方儲存庫安裝 docker apt update apt install ca-certificates curl gnupg lsb-release curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \\ $(lsb_release -cs) stable\u0026#34; | tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null apt update apt install docker-ce docker-ce-cli containerd.io   安裝 docker-compose\n1 2  curl -L \u0026#34;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\u0026#34; -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose   docker-compose bash 補全\n1 2 3  curl \\ -L https://raw.githubusercontent.com/docker/compose/1.29.2/contrib/completion/bash/docker-compose \\ -o /etc/bash_completion.d/docker-compose   安裝 nvidia-docker2 新版本的工具包需要不同的儲存庫\n1 2 3 4 5 6 7 8 9 10  apt install -y curl distribution=$(. /etc/os-release;echo $ID$VERSION_ID) keyring_file=\u0026#34;/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg\u0026#34; curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | gpg --dearmor -o ${keyring_file} curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | \\ sed \u0026#34;s#deb https://#deb [signed-by=${keyring_file}] https://#g\u0026#34; | \\ tee /etc/apt/sources.list.d/nvidia-container-toolkit.list apt update apt install nvidia-docker2   重新啟動systemd + docker（不重新載入systemd，docker 可能無法運作）\n1 2  systemctl daemon-reload systemctl restart docker   Plex docker compose 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  version: \u0026#39;3.7\u0026#39; services: plex: container_name: plex hostname: plex image: linuxserver/plex:latest restart: unless-stopped deploy: resources: reservations: devices: - capabilities: [gpu] environment: TZ: Europe/Paris PUID: 0 PGID: 0 VERSION: latest NVIDIA_VISIBLE_DEVICES: all NVIDIA_DRIVER_CAPABILITIES: compute,video,utility network_mode: host volumes: - /srv/config/plex:/config - /storage/media:/data/media - /storage/temp/plex/transcode:/transcode - /storage/temp/plex/tmp:/tmp   內核有更新時需 卸載nvidia-drive重新安裝pve-headers,重開後重安裝nvidia驅動與pve-headers\n1 2  ./NVIDIA-Linux-x86_64-510.47.03.run --uninstall apt install pve-headers-$(uname -r)    ","date":"2019-01-01T00:00:00Z","permalink":"https://loveflee.github.io/p/nvidia/","title":"plex"}]